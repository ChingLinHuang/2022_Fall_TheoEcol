[["index.html", "Introduction to Theoretical Ecology Course information", " Introduction to Theoretical Ecology Instructor: Po-Ju Ke \\(~~~~~\\) Teaching Assistant: Ching-Lin Huang (Andy) 2022 Fall at National Taiwan Univeristy Course information Description The development of theory plays an important role in advancing ecology as a scientific field. This three-unit course is for students at the graduate or advanced undergraduate level. The course will cover classic theoretical topics in ecology, starting from single-species dynamics and gradually build up to multi-species models. The course will primarily focus on population and community ecology, but we will also briefly discuss models in epidemiology and ecosystem ecology. Emphasis will be on theoretical concepts and corresponding mathematical approaches. This course is designed as a two-hour lecture followed by a one-hour hands-on practice module. In the lecture, we will analyze dynamical models and derive general theories in ecology. In the hands-on practice section, we will use a combination of analytical problem sets, interactive applications, and numerical simulations to gain a general understanding of the dynamics and behavior of different models. Objective By the end of the course, students are expected to be familiar with the basic building blocks of ecological models and would be able to formulate and analyze simple models of their own. The hands-on practice component should allow students to link their ecological intuition with the underlying mathematical model, helping them to better understand the primary literature of theoretical ecology. Requirement Students are expected to have a basic understanding of Calculus (e.g., freshman introductory course) and Ecology. Format Tuesday 6,7,8 (1:20 pm ~ 4:20 pm) at 共207 Grading The final grade consists of: Assignment problem sets (60%) Midterm exam (15%) Final exam (15%) Course participation (10%) Course materials We will be using a combination of textbooks and literature articles on theoretical ecology in this course. Textbook chapters and additional reading materials will be provided (see Syllabus for more details). Below are the textbook references: A Primer of Ecology 4th edition. Nicholas Gotelli, 2008. An Illustrated Guide to Theoretical Ecology. Ted Case, 2000. A Biologist’s Guide to Mathematical Modeling in Ecology and Evolution. Sarah Otto &amp; Troy Day, 2011. Mathematical Ecology of Populations and Ecosystems. John Pastor, 2008. Contacts Instructor: Po-Ju Ke Office: Life Science Building R635 Email: pojuke@ntu.edu.tw Office hours: by appointment Teaching assistant: Ching-Lin Huang (Andy) Office: Life Science Building R635 Email: r09b44010@ntu.edu.tw Office hours: 14:00 ~ 15:00 on Thursday "],["syllabus.html", "Syllabus", " Syllabus Date Lecture topic Lab Readings Week 1 9/6 Introduction: what is theoretical ecology? - Grainger et al., 2021 Week 2 9/13 Exponential population growth Solving exponential growth equation using “deSolve” &amp; Visualization - Week 3 9/20 Logistic population growth and stability analysis - - Week 4 9/27 Discrete population models - - Week 5 10/4 Age-structured population models - - Week 6 10/11 Metapopulations and patch occupancy models - - Week 7 10/18 Lotka-Volterra model of competition: graphical analysis and invasion analysis - - Week 8 10/25 Midterm exam - - Week 9 11/1 Lotka-Volterra model of competition: linear stability analysis - - Week 10 11/8 Modern coexistence theory and predator-prey interactions (I) - - Week 11 11/15 Predator-prey interactions (II) - - Week 12 11/22 Mechanistic models for competition: consumer-resource dynamics - - Week 13 11/29 Multispecies models of predation: apparent competition - - Week 14 12/6 Disease dynamics and SIR models - - Week 15 12/13 Research applcations: plant-soil feedback as an example - - Week 16 12/20 Final exam - - "],["week-2---exponential-population-growth.html", "Week 2 - Exponential population growth", " Week 2 - Exponential population growth In part 1, we will solve the differential equation for exponential population growth and visualize how the population sizes change over time. Part 1 - Numerical solution using the package “deSolve” Two main phases: Model specification: specify the structure of differential equation model Model application: set the time steps, initial population size and model parameters (e.g., intrinsic population growth rate r), and then solve the equation model p span#aaa:before { content: \"(1) \"; display: inline-block; margin-left: -1.5em; margin-right: 0.3em; } p span#bbb:before { content: \"(2) \"; display: inline-block; margin-left: -1.5em; margin-right: 0.3em; } d-article table.lightable-paper { margin-bottom: 0px; } Consider the model \\[ \\frac{dN}{dt} = rN \\] where \\(N\\) is population size and \\(r\\) is the intrinsic growth rate. ###### part 1 ###### # install.packages(&quot;deSolve&quot;) library(deSolve) ### (1) Model specification exponential_model &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dN_dt = r*N # exponential growth equation return(list(c(dN_dt))) # return the results }) } Set the time steps, initial population size and model parameters. ### (2) Model application times &lt;- seq(0, 10, by = 0.1) # time steps to integrate over state &lt;- c(N = 10) # initial population size parms &lt;- c(r = 1.5) # intrinsic growth rate Solve the equation by ode() numerically. # run the ode solver pop_size &lt;- ode(func = exponential_model, times = times, y = state, parms = parms) # take a look at the results head(pop_size) ## time N ## [1,] 0.0 10.00000 ## [2,] 0.1 11.61834 ## [3,] 0.2 13.49860 ## [4,] 0.3 15.68313 ## [5,] 0.4 18.22120 ## [6,] 0.5 21.17002 Visualization plot(N ~ time, data = pop_size) plot(N ~ time, data = pop_size, log = &quot;y&quot;) Part 2 - Comparing different ode solvers In default of ode(), the equations are solved by LSODA method. We can change the method by modifying the argument method in ode(). ###### part 2 ###### # original setting times &lt;- seq(0, 10, by = 0.1) # time steps to integrate over state &lt;- c(N = 10) # initial population size parms &lt;- c(r = 1.5) # intrinsic growth rate # default: LSODA pop_size &lt;- ode(func = exponential_model, times = times, y = state, parms = parms) # Euler&#39;s method pop_size_1 &lt;- ode(func = exponential_model, times = times, y = state, parms = parms, method = &quot;euler&quot;) # compare different method par(mfrow = c(1,2)) plot(N ~ time, data = pop_size, main = &quot;LSODA&quot;) curve(state[1]*exp(parms[1]*x), times[1], times[length(times)], col = &quot;red&quot;, add = T) # correct curve plot(N ~ time, data = pop_size_1, main = &quot;Euler&quot;) curve(state[1]*exp(parms[1]*x), times[1], times[length(times)], col = &quot;red&quot;, add = T) # correct curve # minimize the time step times &lt;- seq(0, 10, by = 0.01) # time steps to integrate over state &lt;- c(N = 10) # initial population size parms &lt;- c(r = 1.5) # intrinsic growth rate # default: LSODA pop_size &lt;- ode(func = exponential_model, times = times, y = state, parms = parms) # Euler&#39;s method pop_size_1 &lt;- ode(func = exponential_model, times = times, y = state, parms = parms, method = &quot;euler&quot;) # compare different method par(mfrow = c(1,2)) plot(N ~ time, data = pop_size, main = &quot;LSODA&quot;) curve(state[1]*exp(parms[1]*x), times[1], times[length(times)], col = &quot;red&quot;, add = T) # correct curve plot(N ~ time, data = pop_size_1, main = &quot;Euler&quot;) curve(state[1]*exp(parms[1]*x), times[1], times[length(times)], col = &quot;red&quot;, add = T) # correct curve Part 3 - Solving exponential growth model with fluctuating growth rate Consider the model \\[ \\frac{dN}{dt} = r(t)N \\ \\text{, } r(t) = \\overline{r} + \\sigma\\sin(\\omega t) \\] where \\(\\overline{r}\\) and \\(\\omega\\) are constants. The analytical solution of the ode model is \\[ N(t) = N_0\\exp\\{\\overline{r}t - \\frac{\\sigma}{\\omega}[\\cos(\\omega t) - 1]\\} \\] ###### part 3 ###### ### Model specification exponential_model_fluc &lt;- function(times, state, parms) { with(as.list(c(state, parms)), { dN_dt = (r_bar + sigma*sin(omega*times))*N # exponential growth equation return(list(c(dN_dt))) # return the results }) } ### Parameters times &lt;- seq(0, 10, by = 0.1) # time steps to integrate over state &lt;- c(N = 10) # initial population size parms &lt;- c(r_bar = 1.5, sigma = 5, omega = 2*pi) # intrinsic growth rate Plot \\(r(t)\\) ### Fluctuating growth rate r = parms[1] + parms[2]*sin(parms[3]*times) plot(r ~ times) curve(parms[1] + parms[2]*sin(parms[3]*x), add = T, col = &quot;red&quot;) ### Solving model pop_size &lt;- ode(func = exponential_model_fluc, times = times, y = state, parms = parms) ### Plotting plot(N ~ times, data = pop_size) curve(state[1]*exp(parms[1]*x - parms[2]/parms[3]*(cos(parms[3]*x) - 1)), add = T) # correct curve plot(N ~ times, data = pop_size, log = &quot;y&quot;) curve(state[1]*exp(parms[1]*x - parms[2]/parms[3]*(cos(parms[3]*x) - 1)), add = T) # correct curve Adjust \\(\\overline{r}\\) ### Parameters times &lt;- seq(0, 10, by = 0.1) # time steps to integrate over state &lt;- c(N = 10) # initial population size parms &lt;- c(r_bar = 0.1, sigma = 5, omega = 2*pi) # intrinsic growth rate ### Fluctuating growth rate r = parms[1] + parms[2]*sin(parms[3]*times) plot(r ~ times) curve(parms[1] + parms[2]*sin(parms[3]*x), add = T, col = &quot;red&quot;) ### Solving model pop_size &lt;- ode(func = exponential_model_fluc, times = times, y = state, parms = parms) ### Plotting plot(N ~ times, data = pop_size) curve(state[1]*exp(parms[1]*x - parms[2]/parms[3]*(cos(parms[3]*x) - 1)), add = T) # correct curve "]]
