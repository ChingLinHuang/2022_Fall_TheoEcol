########################################################################################################################
########################################################################################################################
#### Teaching material: Theoretical Ecology ############################################################################
#### Apparent competition ##############################################################################################
########################################################################################################################
########################################################################################################################



########################################################################################################################
########################################################################################################################
#### Set your working directory and load data files
########################################################################################################################
########################################################################################################################
setwd('/Users/Chris/Dropbox/Public/TEACHING/IntroductionTheoreticalEcology')



########################################################################################################################
########################################################################################################################
#### Install the required R packages
########################################################################################################################
########################################################################################################################
#### load the package into active memory
library(tidyverse)
library(deSolve)
library(ggplot2)



########################################################################################################################
########################################################################################################################
#### Parameter space for Holt (1977) Apparent competition model ########################################################
########################################################################################################################
########################################################################################################################
#### Create a function to evaluate the competition outcome
Apparent_logistic_func <- function(r1, r2, other.parameters){

  # specify the model
  Apparent_logistic_model <- function(times, state, parms) {
    with(as.list(c(state, parms)), {
      dN1_dt = r1 * N1 * (1 - N1 / K1) - a1 * N1 * P
      dN2_dt = r2 * N2 * (1 - N2 / K2) - a2 * N2 * P
      dP_dt = e1 * a1 * N1 * P + e2 * a2 * N2 * P - d * P
      return(list(c(dN1_dt, dN2_dt, dP_dt)))
    })
  }

  # model parameters
  times <- seq(0, 3000, by = 10)
  state <- c(N1 = 0.1, N2 = 0.1, P = 1)
  parms <- c(r1 = r1, r2 = r2, other.parameters)

  # run the ode
  pop_size <- ode(func = Apparent_logistic_model, times = times, y = state, parms = parms)

  # return final population size
  N_final <- nrow(na.omit(pop_size))   # remove NAN's
  return(pop_size[N_final, -1])

}


#### Set up parameter space of interest
Parms <- c(r1 = 0.1, r2 = 0.1, a1 = 0.35, a2 = 0.35, e1 = 0.4, e2 = 0.5, d = 0.8, K1 = 15, K2 = 12)
r_min <- 0.1
r_max <- 0.7
n <- 100
r1.vec <- seq(r_min, r_max, length.out = n)
r2.vec <- seq(r_min, r_max, length.out = n)


#### Create parameter space and saving space
comp_out <- expand.grid(r1 = r1.vec, r2 = r2.vec)
comp_out <- as.data.frame(cbind(comp_out,
                                matrix(0, nrow = dim(comp_out)[1], ncol = 3)))
head(comp_out)


#### Apply the function across the parameter space
start_time <- Sys.time()
for(i in 1:dim(comp_out)[1]){
  comp_out[i, 3:5] <- Apparent_logistic_func(r1 = comp_out$r1[i],
                                             r2 = comp_out$r2[i],
                                             other.parameters = Parms[-c(1:2)])
}
end_time <- Sys.time()
end_time - start_time


#### Determine outcome status
comp_out$Outcome <-
  ifelse (comp_out[, 3] < 1e-4, "N2 win",
          ifelse(comp_out[, 4] < 1e-4, "N1 win", "Coexist"))

#### Visualize the competition outcomes in the grids -- base R
x <- comp_out$r1 / Parms[3]
y <- comp_out$r2 / Parms[4]
z <- as.factor(comp_out$Outcome) # Levels: Coexist N1 win N2 win
color <- c("red", "blue", "green")
plot(x, y, type = "n", xlab = "r1/a1", ylab = "r2/a2")
size <- 0.008571429 #0.003/0.35
for(i in 1:length(z)){
  rect(x[i] - size, y[i] - size, x[i] + size, y[i] + size, col = color[z[i]], border = color[z[i]])
}
abline(a = 0, b = (1 - Parms[7] / (Parms[5] * Parms[3] * Parms[8])), lwd = 4)
abline(a = 0, b = (1 - Parms[7] / (Parms[6] * Parms[4] * Parms[9]))^-1,, lwd = 4)
text(0.5, 1.5, labels = "N2 wins")
text(1.5, 0.5, labels = "N1 wins")
text(1.5, 1.5, labels = "Coexist")


#### Visualize the competition outcomes in the grids -- ggplot
ggplot(comp_out, aes(x = r1/Parms[3], y = r2/Parms[4], z = Outcome, fill = Outcome)) +
  geom_tile() +
  geom_abline(intercept = 0, slope = (1 - Parms[7] / (Parms[5] * Parms[3] * Parms[8])), size = 1.5) +
  geom_abline(intercept = 0, slope = (1 - Parms[7] / (Parms[6] * Parms[4] * Parms[9]))^-1, size = 1.5) +
  labs(x = expression(r[1]/a[1]), y = expression(r[2]/a[2])) +
  scale_x_continuous(limits = c(r_min/Parms[3], r_max/Parms[4]), expand = c(0, 0)) +
  scale_y_continuous(limits = c(r_min/Parms[3], r_max/Parms[4]), expand = c(0, 0)) +
  scale_fill_brewer(palette = "Set1") +
  theme_bw(base_size = 14) +
  theme(panel.grid = element_blank()) +
  coord_fixed(ratio = 1) +
  annotate(geom = "text", x = 0.5, y = 1.5, label = "bold(bolditalic(N[2])~wins)", parse = T) +
  annotate(geom = "text", x = 1.5, y = 1.5, label = "bold(Coexist)", parse = T) +
  annotate(geom = "text", x = 1.5, y = 0.5, label = "bold(bolditalic(N[1])~wins)", parse = T)



########################################################################################################################
########################################################################################################################
#### (Assignment) Bifurcation diagram for the exploitative ecosystem theory ############################################
########################################################################################################################
########################################################################################################################
#### Model specification
library(tidyverse)
library(deSolve)
Chain <- function(times, state, parms) {
  with(as.list(c(state, parms)), {
    dR_dt = r * R * (1 - R / K) - a * R * H
    dH_dt = e * a * R * H - a * H * C - d * H
    dC_dt = e * a * H * C - d * C
    return(list(c(dR_dt, dH_dt, dC_dt)))
  })
}


#### Set up simulation parameter
times <- seq(0, 1000, by = 5)
state <- c(R = 1.0, H = 1.0, C = 1.0)
parms <- c(r = 10.0, a = 0.5, e = 0.5, d = 1.0, K = 0.1)


#### Create parameter space and saving space
K.vec <- seq(0.1, 7.0, by = 0.01)
Result <- as.data.frame(matrix(0, length(K.vec), 4))
names(Result) <- c("Productivity", "Resource", "Herbivore", "Carnivore")


#### Run for-loop to go through the parameter space
for(i in 1:length(K.vec)){
  parms["K"] <- K.vec[i]
  pop_size <- ode(func = Chain, times = times, y = state, parms = parms)
  Result[i, ] <- c(K.vec[i], pop_size[length(times), 2:4])
}


#### Visualize the bifurcation -- ggplot
Result %>%
  as.data.frame() %>%
  gather(key = "Species", value = "Density", -Productivity) %>%
  ggplot(aes(x = Productivity, y = Density, color = Species)) +
  geom_line() +
  geom_vline(xintercept = parms[4] / (parms[2] * parms[3]),
             linetype = 5) +
  geom_vline(xintercept = (parms[4] / (parms[2] * parms[3])) *
               (1 / (1 - ( parms[4] / (parms[1] * parms[3])))),
             linetype = 5) +
  scale_fill_brewer(palette = "Set1") +
  theme_bw(base_size = 14) +
  theme(panel.grid = element_blank()) +
  coord_fixed(ratio = 1)

#### Visualize the bifurcation -- base R
windows()
plot(Resource ~ Productivity, data = Result, type = "n", ann = F)
lines(Resource ~ Productivity, data = Result, col = "blue")
lines(Herbivore ~ Productivity, data = Result, col = "green")
lines(Carnivore ~ Productivity, data = Result, col = "red")
title(xlab = "Productivity", ylab = "Density")
legend("topleft", legend = c("Resource", "Herbivores", "Carnivores"),
       col = c("blue", "green", "red"), lty = 1)
abline(v = parms[4] / (parms[2] * parms[3]), lty = 2)
abline(v = (parms[4] / (parms[2] * parms[3])) *
         (1 / (1 - ( parms[4] / (parms[1] * parms[3])))), lty = 2)



