# install.packages("deSolve")
library(deSolve)

### (1) Model specification ----
# if(){}
exponential_model <- function(times, state, parms) {
  with(as.list(c(state, parms)), {
    dP_dt = P * ((S * (x * n *Vn + C * Pc * Vc + (1 - sigma) * m * Pm * Vm))/ 1 + S *(x * n * Hn + C * Pc * Hc + m * Pm *(sigma * Hms + (1 - sigma) * Hme)) - Up - fP) # Predator
    dC_dt = rc * C *((Kc - C - ALcm * m)/ Km) - (S * P * C * Pc)/(1 + S * (x * n * Hn + C * Pc * Hc + m * Pm *(sigma * Hms + (1 - sigma) * Hme))) # ALcm = alpha_cm, mimic
    dM_dt = rm * m *((Km - m - ALmc * C)/ Kc) - (1 - sigma) * (S * P * m * Pm)/(1 + S * (x * n * Hn + C * Pc * Hc + m * Pm *(sigma * Hms + (1 - sigma) * Hme))) # ALmc = alpha_mc, model
    dN_dt = D * (n0 - n) - (S * P * x * n)/(1 + S * (x * n * Hn + C * Pc * Hc + m * Pm *(sigma * Hms + (1 - sigma) * Hme))) # Alternative prey
    return(list(c(dP_dt, dC_dt, dM_dt, dN_dt, 0, 0)))  # return the results  
  })
}

eventfun_pop <- function(times, state, parms){
  with (as.list(c(state, parms)),{
      probability0 <- data.frame(Pc = rep(seq(0, 1, 0.1), 10), Pm = rep(seq(0, 1, 0.1), each = 10), va = NA)
      probability1 <- data.frame(Pc = rep(seq(0, 1, 0.1), 10), Pm = rep(seq(0, 1, 0.1), each = 10), va = NA)
      for (i in 1:nrow(probability0)) {
      probability0[i,3] <- (S * (C * probability0[i,1] * Vc + (1 - sigma) * m * probability0[i,2] * Vm))/(1 + S *(x * n * Hn + C * probability0[i,1] * Hc + m * probability0[i,2] *(sigma * Hms +(1 - sigma) * Hme))) 
      probability1[i,3] <- (S * (x * n *Vn + C * probability1[i,1] * Vc + (1 - sigma) * m * probability1[i,2] * Vm))/(1 + S *(x * n * Hn + C * probability1[i,1] * Hc + m * probability1[i,2] *(sigma * Hms +(1 - sigma) * Hme)))
      a <- probability0[probability0$va == max(probability0[,3]), ]
      b <- probability1[probability1$va == max(probability1[,3]), ]
        ifelse(a[,3] > b[,3], a <- a, a <- b)
        Pc = a[,1]
        Pm = a[,2]
      }
    return(c(P, C, m, n, Pc, Pm))
  }) }

# use max to find maximum p()
### (2) Model application ----
times <- seq(0, 10, by = 0.1)  # time steps to integrate over
state <- c(P = 2, C = 1, m = 10, n = 20, Pc = 0.1, Pm = 0.1)  # initial population size
parms <- c(n0 = 20, S = 1, x = 1, Vn = 0.7, Vc = 1, sigma = 0, Vm = 0, Hc = 1, Hn = 0.84, Hme = 0.2, Hms = 0, Up = 0, fP = 0.75, rc = 0.2, rm = 0.2, Kc = 100, Km = 100, ALcm = 0.1, ALmc = 0.1, D = 0.3)  # intrinsic growth rate # function of time or function of state var

# run the ode solver
pop_size <- ode(func = exponential_model, times = times, y = state, parms = parms, events = list(func = eventfun_pop, times = times))

# take a look at the results
par(mfrow = c(1, 2))
plot(N1~time, pop_size, type = "l")
plot(N2~time, pop_size, type = "l")

# e.g. ----
## derivative function: rate of change v1 = 0, v2 reduced at first-order rate
derivs <- function(t, var, parms) {
  list(c(0, -0.5 * var[2]))
}
# events: add 1 to v1, multiply v2 with random number
eventfun <- function(t, y, parms){
  with (as.list(y),{
    v1 <- v1 + 1
    v2 <- 5 * runif(1)
    return(c(v1, v2))
  }) }
yini <- c(v1 = 1, v2 = 2)
times <- seq(0, 10, by = 0.1)
out <- ode(func = derivs, y = yini, times = times, parms = NULL,
           events = list(func = eventfun, time = c(1:9)))
plot(out, type = "l")
